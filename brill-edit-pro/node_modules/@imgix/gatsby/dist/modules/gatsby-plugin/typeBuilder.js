"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildImgixGatsbyTypes = void 0;
var createImgixFixedFieldConfig_1 = require("./createImgixFixedFieldConfig");
var createImgixFluidFieldConfig_1 = require("./createImgixFluidFieldConfig");
var createImgixGatsbyImageDataFieldConfig_1 = require("./createImgixGatsbyImageDataFieldConfig");
var createImgixUrlFieldConfig_1 = require("./createImgixUrlFieldConfig");
var fieldNames_1 = require("./fieldNames");
var graphqlTypes_1 = require("./graphqlTypes");
/**
 * This function can be used to return a set of graphql-compose types that should be passed to schema.createObjectType
 */
var buildImgixGatsbyTypes = function (_a) {
    var _b = _a.allowlistFields, allowlistFields = _b === void 0 ? ['url', 'fixed', 'fluid', 'gatsbyImageData'] : _b, imgixClient = _a.imgixClient, resolveUrl = _a.resolveUrl, resolveWidth = _a.resolveWidth, resolveHeight = _a.resolveHeight, defaultParams = _a.defaultParams, cache = _a.cache, namespace = _a.namespace;
    var types = [];
    var inputTypes = [];
    var enumTypes = [];
    var fields = {};
    var paramsInputType = graphqlTypes_1.ImgixParamsInputType({
        name: fieldNames_1.getTypeName({ typeName: 'ParamsInput' }),
    });
    inputTypes.push(paramsInputType);
    if (allowlistFields.includes('url')) {
        fields.url = createImgixUrlFieldConfig_1.createImgixUrlFieldConfig({
            imgixClient: imgixClient,
            resolveUrl: resolveUrl,
            defaultParams: defaultParams,
            paramsInputType: paramsInputType.name,
        });
    }
    if (allowlistFields.includes('fixed')) {
        var fixedType = graphqlTypes_1.createImgixFixedType({
            cache: cache,
            name: fieldNames_1.getTypeName({ typeName: 'Fixed', namespace: namespace }),
        });
        types.push(fixedType);
        fields.fixed = createImgixFixedFieldConfig_1.createImgixFixedFieldConfig({
            type: fixedType.name,
            imgixClient: imgixClient,
            cache: cache,
            resolveUrl: resolveUrl,
            resolveWidth: resolveWidth,
            resolveHeight: resolveHeight,
            defaultParams: defaultParams,
            paramsInputType: paramsInputType.name,
        });
    }
    if (allowlistFields.includes('fluid')) {
        var fluidType = graphqlTypes_1.createImgixFluidType({
            cache: cache,
            name: fieldNames_1.getTypeName({ typeName: 'Fluid', namespace: namespace }),
        });
        types.push(fluidType);
        fields.fluid = createImgixFluidFieldConfig_1.createImgixFluidFieldConfig({
            type: fluidType.name,
            imgixClient: imgixClient,
            cache: cache,
            resolveUrl: resolveUrl,
            resolveWidth: resolveWidth,
            resolveHeight: resolveHeight,
            defaultParams: defaultParams,
            paramsInputType: paramsInputType.name,
        });
    }
    if (allowlistFields.includes('gatsbyImageData')) {
        var placeholderType = graphqlTypes_1.ImgixPlaceholderType(fieldNames_1.getTypeName({ typeName: 'Placeholder', namespace: namespace }));
        enumTypes.push(placeholderType);
        fields.gatsbyImageData = createImgixGatsbyImageDataFieldConfig_1.createImgixGatsbyImageFieldConfig({
            imgixClient: imgixClient,
            cache: cache,
            resolveUrl: resolveUrl,
            resolveWidth: resolveWidth,
            resolveHeight: resolveHeight,
            defaultParams: defaultParams,
            paramsInputType: paramsInputType.name,
            placeholderEnumType: placeholderType.name,
        });
    }
    return {
        types: types,
        fields: fields,
        inputTypes: inputTypes,
        enumTypes: enumTypes,
    };
};
exports.buildImgixGatsbyTypes = buildImgixGatsbyTypes;
//# sourceMappingURL=typeBuilder.js.map