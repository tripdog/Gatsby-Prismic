import { GatsbyCache } from 'gatsby';
import { ComposeInputTypeDefinition, ObjectTypeComposerFieldConfigAsObjectDefinition } from 'graphql-compose';
import { IImgixURLBuilder } from '../../common/imgix-js-core-wrapper';
import { ImgixSourceDataResolver } from '../../common/utils';
import { IImgixParams } from '../../publicTypes';
import { ImgixFluidArgsResolved } from './privateTypes';
interface CreateImgixFluidFieldConfigArgs<TSource> {
    imgixClient: IImgixURLBuilder;
    resolveUrl: ImgixSourceDataResolver<TSource, string>;
    resolveWidth?: ImgixSourceDataResolver<TSource, number | undefined>;
    resolveHeight?: ImgixSourceDataResolver<TSource, number | undefined>;
    cache: GatsbyCache;
    defaultParams?: Partial<IImgixParams>;
    type: string;
    paramsInputType: ComposeInputTypeDefinition;
}
export declare const createImgixFluidFieldConfig: <TSource, TContext>({ imgixClient, resolveUrl, resolveWidth, resolveHeight, cache, defaultParams, type, paramsInputType, }: CreateImgixFluidFieldConfigArgs<TSource>) => ObjectTypeComposerFieldConfigAsObjectDefinition<TSource, TContext, ImgixFluidArgsResolved>;
export declare const createImgixFluidSchemaFieldConfig: <TSource, TContext>(params: Omit<CreateImgixFluidFieldConfigArgs<unknown>, "imgixClient" | "resolveUrl"> & {
    imgixClientOptions?: ({
        domain: string;
        secureURLToken?: string | undefined;
        useHTTPS?: boolean | undefined;
        includeLibraryParam?: boolean | undefined;
    } & {
        ixlib?: string | undefined;
    }) | undefined;
    resolveUrl?: ((source: TSource) => string | null | undefined) | undefined;
}) => ObjectTypeComposerFieldConfigAsObjectDefinition<TSource, TContext, any>;
export {};
//# sourceMappingURL=createImgixFluidFieldConfig.d.ts.map