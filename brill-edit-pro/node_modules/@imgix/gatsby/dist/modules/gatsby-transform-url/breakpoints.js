"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateBreakpoints = void 0;
var js_core_1 = __importDefault(require("@imgix/js-core"));
var common_1 = require("./common");
var VARIABLE_QUALITIES = [75, 50, 35, 23, 20];
var min = function (fallback) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
    }
    return Math.min.apply(Math, __spreadArray([fallback], rest.filter(isNotNull)));
};
var isNotNull = function (v) { return v != null; };
/**
 * This function is a helper function which is designed to return a set of breakpoints that can be passed to `getImageData` from gatsby-plugin-image.
 *
 * @returns breakpoints and breakpointsWithData. breakpoints can be passed straight to gatsby-plugin-image, and breakpointsWithData should be passed as args to the buildUrl function so that it can apply variable quality for fixed srcsets.
 */
var generateBreakpoints = function (opts) {
    var _a, _b;
    if (opts.layout === 'fixed') {
        var dprList = Array.from({ length: common_1.MAX_DPR })
            .map(function (_, i) { return i + 1; })
            .filter(function (dpr) {
            return dpr * opts.width <= min(common_1.MAX_WIDTH, opts.sourceWidth);
        });
        var breakpointsWithData = !opts.disableVariableQuality
            ? dprList.map(function (dpr, i) { return ({
                width: dpr * opts.width,
                quality: VARIABLE_QUALITIES[i],
            }); })
            : [];
        return { outputPixelDensities: dprList, breakpointsWithData: breakpointsWithData };
    }
    var width = opts.width;
    var widthTolerance = (_a = opts.widthTolerance) !== null && _a !== void 0 ? _a : 0.08;
    var maxWidth = min(common_1.MAX_WIDTH, width ? width * common_1.MAX_DPR : undefined, opts.sourceWidth, opts.srcsetMaxWidth);
    var minWidth = min(maxWidth, (_b = opts.srcsetMinWidth) !== null && _b !== void 0 ? _b : 100);
    var fluidBreakpoints = js_core_1.default.targetWidths(minWidth, maxWidth, widthTolerance);
    var widthBreakpoints = width
        ? Array.from({ length: common_1.MAX_DPR })
            .map(function (_, i) { return width * (i + 1); })
            .filter(function (width) { return width <= maxWidth; })
            .filter(function (width) { return fluidBreakpoints.indexOf(width) === -1; })
        : [];
    return {
        breakpoints: __spreadArray(__spreadArray([], fluidBreakpoints), widthBreakpoints).sort(function (a, b) { return a - b; }),
    };
};
exports.generateBreakpoints = generateBreakpoints;
//# sourceMappingURL=breakpoints.js.map