import { IGatsbyImageData, IGetImageDataArgs } from 'gatsby-plugin-image';
import { ImgixUrlParams } from '../../publicTypes';
export declare type IGetGatsbyImageDataOpts = {
    /**
     * The fully qualified image URL to be transformed. Must be an imgix URL and must start with "http" or "https"
     */
    src: string;
    imgixParams?: ImgixUrlParams;
    /**
     * For constrained and fixed images, the width/max-width of the image element
     */
    width?: number;
    /**
     * For constrained and fixed images, the height/max-height of the image element
     */
    height?: number;
    layout?: IGetImageDataArgs['layout'];
    breakpoints?: IGetImageDataArgs['breakpoints'];
    /**
     * This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
     * By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object.
     * Determines how much bigger each srcset is than the last, i.e. nextSrcset = prevSrcset * widthTolerance.
     * Must be greater than 0
     */
    widthTolerance?: number;
    /**
     * Prevents any srcsets being generated smaller than this width.
     */
    srcsetMinWidth?: number;
    /**
     * Prevents any srcsets being generated larger than this width.
     */
    srcsetMaxWidth?: number;
    /**
     * Useful not only for controlling the aspect ratio of the requested image, but also for ensuring that a correctly sized placeholder is rendered.
     */
    aspectRatio?: number;
    /**
     * If the source width is known. Used to constrain srcsets
     */
    sourceWidth?: number;
    /**
     * If the source height is known. Used to constrain srcsets
     */
    sourceHeight?: number;
    backgroundColor?: string;
    /**
     * This disables the "variable quality" feature that decreases the quality of the requested image as the dpr increases for layout: 'fixed'
     */
    disableVariableQuality?: boolean;
};
export declare const GATSBY_IMAGE_HOOK_OPTS_KEYS: readonly ["src", "imgixParams", "width", "height", "layout", "breakpoints", "widthTolerance", "srcsetMinWidth", "srcsetMaxWidth", "aspectRatio", "sourceWidth", "sourceHeight", "backgroundColor", "disableVariableQuality"];
export declare function getGatsbyImageData({ src, sourceWidth, sourceHeight, aspectRatio, widthTolerance, srcsetMinWidth, srcsetMaxWidth, breakpoints: breakpointsOverride, disableVariableQuality, ...props }: IGetGatsbyImageDataOpts): IGatsbyImageData;
//# sourceMappingURL=gatsbyPluginImage.d.ts.map