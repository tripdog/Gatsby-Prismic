var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as O from 'fp-ts/es6/Option';
import { getOptionM } from 'fp-ts/es6/OptionT';
import { getFilterableComposition } from 'fp-ts/es6/Filterable';
import { identity } from 'fp-ts/es6/function';
import { getSemigroup as getIOSemigroup, io, of as ioOf, map as ioMap } from 'fp-ts/es6/IO';
import { pipe } from 'fp-ts/es6/pipeable';
var T = getOptionM(io);
var F = getFilterableComposition(io, O.option);
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @category constructors
 * @since 0.1.14
 */
export var none = T.none();
/**
 * @category constructors
 * @since 0.1.14
 */
export var some = T.of;
/**
 * @category constructors
 * @since 0.1.14
 */
export var fromIO = T.fromM;
/**
 * @category constructors
 * @since 0.1.14
 */
export var fromOption = ioOf;
/**
 * @category constructors
 * @since 0.1.14
 */
export var fromOptionK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return fromOption(f.apply(void 0, a));
}; };
/**
 * @category constructors
 * @since 0.1.14
 */
export var fromNullable = function (a) { return fromOption(O.fromNullable(a)); };
/**
 * @category constructors
 * @since 0.1.14
 */
export var fromIOEither = function (ma) { return io.map(ma, O.fromEither); };
// -------------------------------------------------------------------------------------
// destructors
// -------------------------------------------------------------------------------------
/**
 * @category destructors
 * @since 0.1.14
 */
export var fold = function (onNone, onSome) { return function (ma) { return T.fold(ma, onNone, onSome); }; };
/**
 * @category destructors
 * @since 0.1.14
 */
export var getOrElse = function (onNone) { return function (ma) {
    return T.getOrElse(ma, onNone);
}; };
/**
 * @category destructors
 * @since 0.1.14
 */
export var toUndefined = function (ma) { return io.map(ma, O.toUndefined); };
/**
 * @category destructors
 * @since 0.1.14
 */
export var toNullable = function (ma) { return io.map(ma, O.toNullable); };
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @category combinators
 * @since 0.1.14
 */
export var mapNullable = function (f) {
    return ioMap(O.mapNullable(f));
};
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
export var map = function (f) { return function (fa) { return T.map(fa, f); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var ap = function (fa) { return function (fab) { return T.ap(fab, fa); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var apFirst = function (fb) { return function (fa) {
    return pipe(fa, map(function (a) { return function (_) { return a; }; }), ap(fb));
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var apSecond = function (fb) { return function (fa) {
    return pipe(fa, map(function () { return function (b) { return b; }; }), ap(fb));
}; };
/**
 * @category Applicative
 * @since 0.1.18
 */
export var of = some;
/**
 * @category Monad
 * @since 0.1.18
 */
export var chain = function (f) { return function (ma) { return T.chain(ma, f); }; };
/**
 * @category Monad
 * @since 0.1.18
 */
export var chainFirst = function (f) { return function (ma) {
    return T.chain(ma, function (a) { return T.map(f(a), function () { return a; }); });
}; };
/**
 * @category Monad
 * @since 0.1.14
 */
export var chainOptionK = function (f) {
    return chain(fromOptionK(f));
};
/**
 * @category Monad
 * @since 0.1.18
 */
export var flatten = function (mma) { return T.chain(mma, identity); };
/**
 * @category Alt
 * @since 0.1.18
 */
export var alt = function (that) { return function (fa) { return T.alt(fa, that); }; };
/**
 * @category Alternative
 * @since 0.1.18
 */
export var zero = function () { return function () { return O.none; }; };
/**
 * @category Compactable
 * @since 0.1.18
 */
export var compact = F.compact;
/**
 * @category Compactable
 * @since 0.1.18
 */
export var separate = F.separate;
/**
 * @category Filterable
 * @since 0.1.18
 */
export var filter = function (predicate) { return function (fa) { return F.filter(fa, predicate); }; };
/**
 * @category Filterable
 * @since 0.1.18
 */
export var filterMap = function (f) { return function (fa) {
    return F.filterMap(fa, f);
}; };
/**
 * @category Filterable
 * @since 0.1.18
 */
export var partition = function (predicate) { return function (fa) { return F.partition(fa, predicate); }; };
/**
 * @category Filterable
 * @since 0.1.18
 */
export var partitionMap = function (f) { return function (fa) { return F.partitionMap(fa, f); }; };
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.14
 */
export var URI = 'IOOption';
/**
 * @category instances
 * @since 0.1.14
 */
export var getApplySemigroup = function (S) {
    return getIOSemigroup(O.getApplySemigroup(S));
};
/**
 * @category instances
 * @since 0.1.14
 */
export var getApplyMonoid = function (M) { return ({
    concat: getApplySemigroup(M).concat,
    empty: some(M.empty)
}); };
/**
 * @category instances
 * @since 0.1.18
 */
export var Functor = {
    URI: URI,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Applicative = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    of: of
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Apply = {
    URI: URI,
    map: T.map,
    ap: T.ap
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Monad = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    of: of,
    chain: T.chain
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Alt = {
    URI: URI,
    map: T.map,
    alt: T.alt
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Alternative = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    of: of,
    alt: T.alt,
    zero: zero
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Compactable = {
    URI: URI,
    compact: compact,
    separate: separate
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Filterable = {
    URI: URI,
    map: T.map,
    compact: compact,
    separate: separate,
    filter: F.filter,
    filterMap: F.filterMap,
    partition: F.partition,
    partitionMap: F.partitionMap
};
/**
 * @since 0.1.14
 */
export var ioOption = __assign({ URI: URI, of: some, ap: T.ap, chain: T.chain, alt: T.alt, fromIO: fromIO }, F);
