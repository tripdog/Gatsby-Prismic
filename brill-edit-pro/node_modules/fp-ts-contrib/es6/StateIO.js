import { identity } from 'fp-ts/es6/function';
import * as I from 'fp-ts/es6/IO';
import { pipe } from 'fp-ts/es6/pipeable';
import { getStateM } from 'fp-ts/es6/StateT';
var T = getStateM(I.io);
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @category constructors
 * @since 0.1.0
 */
export var get = T.get;
/**
 * @category constructors
 * @since 0.1.0
 */
export var put = T.put;
/**
 * @category constructors
 * @since 0.1.0
 */
export var modify = T.modify;
/**
 * @category constructors
 * @since 0.1.0
 */
export var gets = T.gets;
/**
 * @category constructors
 * @since 0.1.0
 */
export var fromIO = T.fromM;
/**
 * @category constructors
 * @since 0.1.0
 */
export var fromState = T.fromState;
/**
 * @category constructors
 * @since 0.1.10
 */
export var fromIOK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return fromIO(f.apply(void 0, a));
}; };
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
export var map = function (f) { return function (fa) { return T.map(fa, f); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var ap = function (fa) { return function (fab) {
    return T.ap(fab, fa);
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var apFirst = function (fb) { return function (fa) {
    return pipe(fa, map(function (a) { return function (_) { return a; }; }), ap(fb));
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var apSecond = function (fb) { return function (fa) {
    return pipe(fa, map(function () { return function (b) { return b; }; }), ap(fb));
}; };
/**
 * @category Applicative
 * @since 0.1.18
 */
export var of = T.of;
/**
 * @category Monad
 * @since 0.1.18
 */
export var chain = function (f) { return function (ma) {
    return T.chain(ma, f);
}; };
/**
 * @category Monad
 * @since 0.1.18
 */
export var chainFirst = function (f) { return function (ma) {
    return T.chain(ma, function (a) { return T.map(f(a), function () { return a; }); });
}; };
/**
 * @category Monad
 * @since 0.1.10
 */
export var chainIOK = function (f) {
    return chain(fromIOK(f));
};
/**
 * @category Monad
 * @since 0.1.18
 */
export var flatten = function (mma) { return T.chain(mma, identity); };
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.0
 */
export var URI = 'StateIO';
/**
 * @category instances
 * @since 0.1.18
 */
export var Functor = {
    URI: URI,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Applicative = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    of: of
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Apply = {
    URI: URI,
    map: T.map,
    ap: T.ap
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Monad = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    chain: T.chain,
    of: of
};
/**
 * @category instances
 * @since 0.1.0
 */
export var stateIO = {
    URI: URI,
    map: T.map,
    of: T.of,
    ap: T.ap,
    chain: T.chain
};
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------
/**
 * @since 0.1.0
 */
export var evalState = T.evalState;
/**
 * @since 0.1.0
 */
export var execState = T.execState;
/**
 * @since 0.1.0
 */
export var run = function (ma, s) { return ma(s)()[0]; };
