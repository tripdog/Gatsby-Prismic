/**
 * Provides a pointed array, which is a non-empty zipper-like array structure that tracks an index (focus)
 * position in an array. Focus can be moved forward and backwards through the array.
 *
 * The array `[1, 2, 3, 4]` with focus on `3` is represented by `Zipper([1, 2], 3, [4])`
 *
 * Adapted from
 *
 * - https://github.com/DavidHarrison/purescript-list-zipper
 * - https://github.com/thunklife/purescript-zipper
 * - https://github.com/scalaz/scalaz/blob/series/7.3.x/core/src/main/scala/scalaz/Zipper.scala
 *
 * @since 0.1.6
 */
import { Applicative1 } from 'fp-ts/es6/Applicative'
import { Apply1 } from 'fp-ts/es6/Apply'
import { Comonad1 } from 'fp-ts/es6/Comonad'
import { Foldable1 } from 'fp-ts/es6/Foldable'
import { Predicate } from 'fp-ts/es6/function'
import { Functor1 } from 'fp-ts/es6/Functor'
import { FunctorWithIndex1 } from 'fp-ts/es6/FunctorWithIndex'
import { Monoid } from 'fp-ts/es6/Monoid'
import * as NEA from 'fp-ts/es6/NonEmptyArray'
import * as O from 'fp-ts/es6/Option'
import { Semigroup } from 'fp-ts/es6/Semigroup'
import { Show } from 'fp-ts/es6/Show'
import { Traversable1 } from 'fp-ts/es6/Traversable'
import { ReadonlyNonEmptyArray } from 'fp-ts/ReadonlyNonEmptyArray'
import NonEmptyArray = NEA.NonEmptyArray
import Option = O.Option
/**
 * @category model
 * @since 0.1.6
 */
export interface Zipper<A> {
  readonly lefts: Array<A>
  readonly focus: A
  readonly rights: Array<A>
}
/**
 * Creates a new zipper.
 *
 * @category constructors
 * @since 0.1.6
 */
export declare const make: <A>(lefts: ReadonlyArray<A>, focus: A, rights: ReadonlyArray<A>) => Zipper<A>
/**
 * @category constructors
 * @since 0.1.23
 */
export declare const fromReadonlyArray: <A>(as: ReadonlyArray<A>, focusIndex?: number) => Option<Zipper<A>>
/**
 * @category constructors
 * @since 0.1.6
 */
export declare const fromArray: <A>(as: Array<A>, focusIndex?: number) => Option<Zipper<A>>
/**
 * @category constructors
 * @since 0.1.23
 */
export declare const fromReadonlyNonEmptyArray: <A>(rnea: ReadonlyNonEmptyArray<A>) => Zipper<A>
/**
 * @category constructors
 * @since 0.1.6
 */
export declare const fromNonEmptyArray: <A>(nea: NonEmptyArray<A>) => Zipper<A>
/**
 * @category destructors
 * @since 0.1.18
 */
export declare const isOutOfBound: <A>(index: number, fa: Zipper<A>) => boolean
/**
 * @category destructors
 * @since 0.1.6
 */
export declare const length: <A>(fa: Zipper<A>) => number
/**
 * @category destructors
 * @since 0.1.23
 */
export declare const toNonEmptyArray: <A>(fa: Zipper<A>) => NonEmptyArray<A>
/**
 * @category destructors
 * @since 0.1.23
 */
export declare const toReadonlyNonEmptyArray: <A>(fa: Zipper<A>) => ReadonlyNonEmptyArray<A>
/**
 * @category destructors
 * @since 0.1.6
 * @deprecated Use the new {@link toNonEmptyArray} destructor instead.
 */
export declare const toArray: <A>(fa: Zipper<A>) => Array<A>
/**
 * Updates the focus of the zipper.
 *
 * @category combinators
 * @since 0.1.6
 */
export declare const update: <A>(a: A) => (fa: Zipper<A>) => Zipper<A>
/**
 * Applies `f` to the focus and update with the result.
 *
 * @category combinators
 * @since 0.1.6
 */
export declare const modify: <A>(f: (a: A) => A) => (fa: Zipper<A>) => Zipper<A>
/**
 * Moves focus in the zipper, or `None` if there is no such element.
 *
 * @category combinators
 * @since 0.1.6
 */
export declare const move: <A>(f: (currentIndex: number) => number, fa: Zipper<A>) => Option<Zipper<A>>
/**
 * Find the first index for which a predicate holds.
 *
 * @category utils
 * @since 0.1.24
 */
export declare const findIndex: <A>(predicate: Predicate<A>) => (fa: Zipper<A>) => O.Option<number>
/**
 * Use a function to find and focus the first matching element in the array. If
 * no element matches, `None` is returned. If an element matches,
 * `Some<Zipper<A>>` is returned.
 *
 * @category combinators
 * @since 0.1.26
 */
export declare const moveByFindFirst: <A>(predicate: Predicate<A>) => (fa: Zipper<A>) => O.Option<Zipper<A>>
/**
 * Moves focus of the zipper up.
 *
 * @category combinators
 * @since 0.1.6
 */
export declare const up: <A>(fa: Zipper<A>) => Option<Zipper<A>>
/**
 * Moves focus of the zipper down.
 *
 * @category combinators
 * @since 0.1.6
 */
export declare const down: <A>(fa: Zipper<A>) => Option<Zipper<A>>
/**
 * Moves focus to the start of the zipper.
 *
 * @category combinators
 * @since 0.1.6
 */
export declare const start: <A>(fa: Zipper<A>) => Zipper<A>
/**
 * Moves focus to the end of the zipper.
 *
 * @category combinators
 * @since 0.1.6
 */
export declare const end: <A>(fa: Zipper<A>) => Zipper<A>
/**
 * Inserts an element to the left of the focus and focuses on the new element.
 *
 * @category combinators
 * @since 0.1.6
 */
export declare const insertLeft: <A>(a: A) => (fa: Zipper<A>) => Zipper<A>
/**
 * Inserts an element to the right of the focus and focuses on the new element.
 *
 * @category combinators
 * @since 0.1.6
 */
export declare const insertRight: <A>(a: A) => (fa: Zipper<A>) => Zipper<A>
/**
 * Deletes the element at focus and moves the focus to the left. If there is no element on the left,
 * the focus is moved to the right.
 *
 * @category combinators
 * @since 0.1.6
 */
export declare const deleteLeft: <A>(fa: Zipper<A>) => Option<Zipper<A>>
/**
 * Deletes the element at focus and moves the focus to the right. If there is no element on the right,
 * the focus is moved to the left.
 *
 * @category combinators
 * @since 0.1.6
 */
export declare const deleteRight: <A>(fa: Zipper<A>) => Option<Zipper<A>>
/**
 * @category Functor
 * @since 0.1.18
 */
export declare const map: <A, B>(f: (a: A) => B) => (fa: Zipper<A>) => Zipper<B>
/**
 * @category FunctorWithIndex
 * @since 0.1.18
 */
export declare const mapWithIndex: <A, B>(f: (i: number, a: A) => B) => (fa: Zipper<A>) => Zipper<B>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const ap: <A>(fa: Zipper<A>) => <B>(fab: Zipper<(a: A) => B>) => Zipper<B>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const apFirst: <B>(fb: Zipper<B>) => <A>(fa: Zipper<A>) => Zipper<A>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const apSecond: <B>(fb: Zipper<B>) => <A>(fa: Zipper<A>) => Zipper<B>
/**
 * @category Applicative
 * @since 0.1.6
 */
export declare const of: <A>(focus: A) => Zipper<A>
/**
 * @category Extend
 * @since 0.1.18
 */
export declare const extend: <A, B>(f: (fa: Zipper<A>) => B) => (wa: Zipper<A>) => Zipper<B>
/**
 * @category Extend
 * @since 0.1.18
 */
export declare const duplicate: <A>(wa: Zipper<A>) => Zipper<Zipper<A>>
/**
 * @category Foldable
 * @since 0.1.18
 */
export declare const foldMap: <M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: Zipper<A>) => M
/**
 * @category Foldable
 * @since 0.1.18
 */
export declare const reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: Zipper<A>) => B
/**
 * @category Foldable
 * @since 0.1.18
 */
export declare const reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => (fa: Zipper<A>) => B
/**
 * @category Traversable
 * @since 0.1.18
 */
export declare const sequence: Traversable1<URI>['sequence']
/**
 * @category Comonad
 * @since 0.1.18
 */
export declare const extract: Comonad1<URI>['extract']
/**
 * @category instances
 * @since 0.1.6
 */
export declare const URI = 'Zipper'
/**
 * @category instances
 * @since 0.1.6
 */
export declare type URI = typeof URI
declare module 'fp-ts/es6/HKT' {
  interface URItoKind<A> {
    Zipper: Zipper<A>
  }
}
/**
 * @category instances
 * @since 0.1.6
 */
export declare const getShow: <A>(S: Show<A>) => Show<Zipper<A>>
/**
 * @category instances
 * @since 0.1.6
 */
export declare const getSemigroup: <A>(S: Semigroup<A>) => Semigroup<Zipper<A>>
/**
 * @category instances
 * @since 0.1.6
 */
export declare const getMonoid: <A>(M: Monoid<A>) => Monoid<Zipper<A>>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Functor: Functor1<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const FunctorWithIndex: FunctorWithIndex1<URI, number>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Applicative: Applicative1<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Apply: Apply1<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Foldable: Foldable1<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Traversable: Traversable1<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Comonad: Comonad1<URI>
/**
 * @category instances
 * @since 0.1.6
 */
export declare const zipper: Applicative1<URI> &
  Foldable1<URI> &
  Traversable1<URI> &
  Comonad1<URI> &
  FunctorWithIndex1<URI, number>
