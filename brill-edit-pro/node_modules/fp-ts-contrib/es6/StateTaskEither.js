var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { identity } from 'fp-ts/es6/function';
import { pipe } from 'fp-ts/es6/pipeable';
import { getStateM } from 'fp-ts/es6/StateT';
import * as TE from 'fp-ts/es6/TaskEither';
var T = getStateM(TE.taskEither);
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @category constructors
 * @since 0.1.0
 */
export var get = T.get;
/**
 * @category constructors
 * @since 0.1.0
 */
export var put = T.put;
/**
 * @category constructors
 * @since 0.1.0
 */
export var modify = T.modify;
/**
 * @category constructors
 * @since 0.1.0
 */
export var gets = T.gets;
/**
 * @category constructors
 * @since 0.1.0
 */
export var left = function (e) { return fromTaskEither(TE.left(e)); };
/**
 * @category constructors
 * @since 0.1.0
 */
export var right = T.of;
/**
 * @category constructors
 * @since 0.1.0
 */
export var leftIO = function (me) { return fromTaskEither(TE.leftIO(me)); };
/**
 * @category constructors
 * @since 0.1.0
 */
export var rightIO = function (ma) { return fromTaskEither(TE.rightIO(ma)); };
/**
 * @category constructors
 * @since 0.1.0
 */
export var leftTask = function (me) { return fromTaskEither(TE.leftTask(me)); };
/**
 * @category constructors
 * @since 0.1.0
 */
export var rightTask = function (ma) { return fromTaskEither(TE.rightTask(ma)); };
/**
 * @category constructors
 * @since 0.1.0
 */
export var leftState = function (me) { return function (s) { return TE.left(me(s)[0]); }; };
/**
 * @category constructors
 * @since 0.1.0
 */
export var rightState = T.fromState;
/**
 * @category constructors
 * @since 0.1.18
 */
export var fromOption = function (onNone) { return function (ma) {
    return ma._tag === 'None' ? left(onNone()) : right(ma.value);
}; };
/**
 * @category constructors
 * @since 0.1.18
 */
export var fromEither = function (ma) {
    return ma._tag === 'Left' ? left(ma.left) : right(ma.right);
};
/**
 * @category constructors
 * @since 0.1.0
 */
export var fromIOEither = function (ma) {
    return fromTaskEither(TE.fromIOEither(ma));
};
/**
 * @category constructors
 * @since 0.1.0
 */
export var fromTaskEither = T.fromM;
/**
 * @category constructors
 * @since 0.1.10
 */
export var fromEitherK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return fromEither(f.apply(void 0, a));
}; };
/**
 * @category constructors
 * @since 0.1.10
 */
export var fromIOEitherK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return fromIOEither(f.apply(void 0, a));
}; };
/**
 * @category constructors
 * @since 0.1.10
 */
export var fromTaskEitherK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return fromTaskEither(f.apply(void 0, a));
}; };
/**
 * @category constructors
 * @since 0.1.18
 */
export var fromPredicate = function (predicate, onFalse) { return function (a) {
    return predicate(a) ? right(a) : left(onFalse(a));
}; };
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @category combinators
 * @since 0.1.18
 */
export var filterOrElse = function (predicate, onFalse) { return function (ma) { return T.chain(ma, function (a) { return (predicate(a) ? right(a) : left(onFalse(a))); }); }; };
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
export var map = function (f) { return function (fa) { return T.map(fa, f); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var ap = function (fa) { return function (fab) { return T.ap(fab, fa); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var apFirst = function (fb) { return function (fa) {
    return pipe(fa, map(function (a) { return function (_) { return a; }; }), ap(fb));
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var apSecond = function (fb) { return function (fa) {
    return pipe(fa, map(function () { return function (b) { return b; }; }), ap(fb));
}; };
/**
 * @category Applicative
 * @since 0.1.18
 */
export var of = right;
/**
 * @category Monad
 * @since 0.1.18
 */
export var chain = function (f) { return function (ma) { return T.chain(ma, f); }; };
/**
 * @category Monad
 * @since 0.1.18
 */
export var chainFirst = function (f) { return function (ma) {
    return T.chain(ma, function (a) { return T.map(f(a), function () { return a; }); });
}; };
/**
 * @category Monad
 * @since 0.1.10
 */
export var chainEitherK = function (f) { return chain(fromEitherK(f)); };
/**
 * @category Monad
 * @since 0.1.10
 */
export var chainIOEitherK = function (f) { return chain(fromIOEitherK(f)); };
/**
 * @category Monad
 * @since 0.1.10
 */
export var chainTaskEitherK = function (f) { return chain(fromTaskEitherK(f)); };
/**
 * @category Monad
 * @since 0.1.18
 */
export var flatten = function (mma) { return T.chain(mma, identity); };
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.0
 */
export var URI = 'StateTaskEither';
/**
 * @category instances
 * @since 0.1.18
 */
export var Functor = {
    URI: URI,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Applicative = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    of: of
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Apply = {
    URI: URI,
    map: T.map,
    ap: T.ap
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Monad = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    chain: T.chain,
    of: of
};
/**
 * @category instances
 * @since 0.1.0
 */
export var stateTaskEither = {
    URI: URI,
    map: T.map,
    of: right,
    ap: T.ap,
    chain: T.chain,
    throwError: left
};
/**
 * Like `stateTaskEither` but `ap` is sequential
 *
 * @category instances
 * @since 0.1.0
 */
export var stateTaskEitherSeq = __assign(__assign({}, stateTaskEither), { ap: function (mab, ma) { return T.chain(mab, function (f) { return T.map(ma, f); }); } });
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------
/**
 * @since 0.1.0
 */
export var evalState = T.evalState;
/**
 * @since 0.1.0
 */
export var execState = T.execState;
/**
 * @since 0.1.0
 */
export var run = function (ma, s) { return ma(s)(); };
