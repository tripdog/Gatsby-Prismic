import { array, empty, of as arrayOf } from 'fp-ts/es6/Array';
import { identity } from 'fp-ts/es6/function';
import { getOptionM } from 'fp-ts/es6/OptionT';
import { pipe } from 'fp-ts/es6/pipeable';
var T = getOptionM(array);
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @category constructors
 * @since 0.1.0
 */
export var fromArray = T.fromM;
/**
 * @category constructors
 * @since 0.1.0
 */
export var fromOption = arrayOf;
/**
 * @category constructors
 * @since 0.1.10
 */
export var fromOptionK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return fromOption(f.apply(void 0, a));
}; };
/**
 * @category constructors
 * @since 0.1.0
 */
export var none = T.none();
/**
 * @category constructors
 * @since 0.1.0
 */
export var some = T.of;
// -------------------------------------------------------------------------------------
// destructors
// -------------------------------------------------------------------------------------
/**
 * @category destructors
 * @since 0.1.0
 */
export var fold = function (onNone, onSome) { return function (as) { return T.fold(as, onNone, onSome); }; };
/**
 * @category destructors
 * @since 0.1.0
 */
export var getOrElse = function (onNone) { return function (as) {
    return T.getOrElse(as, onNone);
}; };
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
export var map = function (f) { return function (fa) { return T.map(fa, f); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var ap = function (fa) { return function (fab) {
    return T.ap(fab, fa);
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var apFirst = function (fb) { return function (fa) {
    return pipe(fa, map(function (a) { return function (_) { return a; }; }), ap(fb));
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var apSecond = function (fb) { return function (fa) {
    return pipe(fa, map(function () { return function (b) { return b; }; }), ap(fb));
}; };
/**
 * @category Applicative
 * @since 0.1.18
 */
export var of = T.of;
/**
 * @category Monad
 * @since 0.1.10
 */
export var chainOptionK = function (f) {
    return chain(fromOptionK(f));
};
/**
 * @category Monad
 * @since 0.1.18
 */
export var chain = function (f) { return function (fa) {
    return T.chain(fa, f);
}; };
/**
 * @category Monad
 * @since 0.1.18
 */
export var chainFirst = function (f) { return function (ma) {
    return T.chain(ma, function (a) { return T.map(f(a), function () { return a; }); });
}; };
/**
 * @category Monad
 * @since 0.1.18
 */
export var flatten = function (mma) { return T.chain(mma, identity); };
/**
 * @category Alternative
 * @since 0.1.18
 */
export var alt = function (that) { return function (fa) {
    return T.alt(fa, that);
}; };
/**
 * @category Alternative
 * @since 0.1.18
 */
export var zero = function () { return empty; };
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.0
 */
export var URI = 'ArrayOption';
/**
 * @category instances
 * @since 0.1.18
 */
export var Functor = {
    URI: URI,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Applicative = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    of: of
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Apply = {
    URI: URI,
    ap: T.ap,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Monad = {
    URI: URI,
    ap: T.ap,
    chain: T.chain,
    map: T.map,
    of: T.of
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Alt = {
    URI: URI,
    alt: T.alt,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Alternative = {
    URI: URI,
    alt: T.alt,
    ap: T.ap,
    map: T.map,
    of: T.of,
    zero: zero
};
/**
 * @category instances
 * @since 0.1.0
 */
export var arrayOption = {
    URI: URI,
    map: T.map,
    of: some,
    ap: T.ap,
    chain: T.chain,
    alt: T.alt
};
