import { identity } from 'fp-ts/es6/function';
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
var impure = function (fx, f) { return ({ _tag: 'Impure', fx: fx, f: f }); };
/**
 * Lift an impure value described by the generating type constructor `F` into the free monad
 *
 * @category constructors
 * @since 0.1.3
 */
export var liftF = function (fa) { return impure(fa, function (a) { return free.of(a); }); };
export function foldFree(M) {
    return function (nt, fa) {
        if (isPure(fa)) {
            return M.of(fa.value);
        }
        else {
            return M.chain(nt(fa.fx), function (x) { return foldFree(M)(nt, fa.f(x)); });
        }
    };
}
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
var substFree = function (f) {
    function go(fa) {
        switch (fa._tag) {
            case 'Pure':
                return free.of(fa.value);
            case 'Impure':
                return free.chain(f(fa.fx), function (x) { return go(fa.f(x)); });
        }
    }
    return go;
};
export function hoistFree(nt) {
    return substFree(function (fa) { return liftF(nt(fa)); });
}
// -------------------------------------------------------------------------------------
// non-pipeables
// -------------------------------------------------------------------------------------
var map_ = function (fa, f) {
    return isPure(fa) ? free.of(f(fa.value)) : impure(fa.fx, function (x) { return free.map(fa.f(x), f); });
};
var ap_ = function (fab, fa) {
    return free.chain(fab, function (f) { return free.map(fa, f); });
};
var chain_ = function (ma, f) {
    return isPure(ma) ? f(ma.value) : impure(ma.fx, function (x) { return free.chain(ma.f(x), f); });
};
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
export var map = function (f) { return function (fa) { return map_(fa, f); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var ap = function (fa) { return function (fab) { return ap_(fab, fa); }; };
/**
 * @category Monad
 * @since 0.1.18
 */
export var chain = function (f) { return function (ma) { return chain_(ma, f); }; };
/**
 * @category Monad
 * @since 0.1.18
 */
export var flatten = function (mma) { return chain_(mma, identity); };
/**
 * @category Applicative
 * @since 0.1.18
 */
export var of = function (a) { return ({ _tag: 'Pure', value: a }); };
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.3
 */
export var URI = 'Free';
/**
 * @category instances
 * @since 0.1.18
 */
export var Functor = {
    URI: URI,
    map: map_
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Applicative = {
    URI: URI,
    map: map_,
    ap: ap_,
    of: of
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Apply = {
    URI: URI,
    ap: ap_,
    map: map_
};
/**
 * Monad instance for Free
 *
 * @category instances
 * @since 0.1.3
 */
export var free = {
    URI: URI,
    ap: ap_,
    chain: chain_,
    map: map_,
    of: of
};
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------
/**
 * Check if given Free instance is Pure
 *
 * @since 0.1.3
 */
export var isPure = function (fa) { return fa._tag === 'Pure'; };
/**
 * Check if given Free instance is Impure
 *
 * @since 0.1.3
 */
export var isImpure = function (fa) { return fa._tag === 'Impure'; };
