"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var O = __importStar(require("fp-ts/lib/Option"));
var OptionT_1 = require("fp-ts/lib/OptionT");
var Filterable_1 = require("fp-ts/lib/Filterable");
var function_1 = require("fp-ts/lib/function");
var IO_1 = require("fp-ts/lib/IO");
var pipeable_1 = require("fp-ts/lib/pipeable");
var T = OptionT_1.getOptionM(IO_1.io);
var F = Filterable_1.getFilterableComposition(IO_1.io, O.option);
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @category constructors
 * @since 0.1.14
 */
exports.none = T.none();
/**
 * @category constructors
 * @since 0.1.14
 */
exports.some = T.of;
/**
 * @category constructors
 * @since 0.1.14
 */
exports.fromIO = T.fromM;
/**
 * @category constructors
 * @since 0.1.14
 */
exports.fromOption = IO_1.of;
/**
 * @category constructors
 * @since 0.1.14
 */
exports.fromOptionK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return exports.fromOption(f.apply(void 0, a));
}; };
/**
 * @category constructors
 * @since 0.1.14
 */
exports.fromNullable = function (a) { return exports.fromOption(O.fromNullable(a)); };
/**
 * @category constructors
 * @since 0.1.14
 */
exports.fromIOEither = function (ma) { return IO_1.io.map(ma, O.fromEither); };
// -------------------------------------------------------------------------------------
// destructors
// -------------------------------------------------------------------------------------
/**
 * @category destructors
 * @since 0.1.14
 */
exports.fold = function (onNone, onSome) { return function (ma) { return T.fold(ma, onNone, onSome); }; };
/**
 * @category destructors
 * @since 0.1.14
 */
exports.getOrElse = function (onNone) { return function (ma) {
    return T.getOrElse(ma, onNone);
}; };
/**
 * @category destructors
 * @since 0.1.14
 */
exports.toUndefined = function (ma) { return IO_1.io.map(ma, O.toUndefined); };
/**
 * @category destructors
 * @since 0.1.14
 */
exports.toNullable = function (ma) { return IO_1.io.map(ma, O.toNullable); };
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @category combinators
 * @since 0.1.14
 */
exports.mapNullable = function (f) {
    return IO_1.map(O.mapNullable(f));
};
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
exports.map = function (f) { return function (fa) { return T.map(fa, f); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
exports.ap = function (fa) { return function (fab) { return T.ap(fab, fa); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
exports.apFirst = function (fb) { return function (fa) {
    return pipeable_1.pipe(fa, exports.map(function (a) { return function (_) { return a; }; }), exports.ap(fb));
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
exports.apSecond = function (fb) { return function (fa) {
    return pipeable_1.pipe(fa, exports.map(function () { return function (b) { return b; }; }), exports.ap(fb));
}; };
/**
 * @category Applicative
 * @since 0.1.18
 */
exports.of = exports.some;
/**
 * @category Monad
 * @since 0.1.18
 */
exports.chain = function (f) { return function (ma) { return T.chain(ma, f); }; };
/**
 * @category Monad
 * @since 0.1.18
 */
exports.chainFirst = function (f) { return function (ma) {
    return T.chain(ma, function (a) { return T.map(f(a), function () { return a; }); });
}; };
/**
 * @category Monad
 * @since 0.1.14
 */
exports.chainOptionK = function (f) {
    return exports.chain(exports.fromOptionK(f));
};
/**
 * @category Monad
 * @since 0.1.18
 */
exports.flatten = function (mma) { return T.chain(mma, function_1.identity); };
/**
 * @category Alt
 * @since 0.1.18
 */
exports.alt = function (that) { return function (fa) { return T.alt(fa, that); }; };
/**
 * @category Alternative
 * @since 0.1.18
 */
exports.zero = function () { return function () { return O.none; }; };
/**
 * @category Compactable
 * @since 0.1.18
 */
exports.compact = F.compact;
/**
 * @category Compactable
 * @since 0.1.18
 */
exports.separate = F.separate;
/**
 * @category Filterable
 * @since 0.1.18
 */
exports.filter = function (predicate) { return function (fa) { return F.filter(fa, predicate); }; };
/**
 * @category Filterable
 * @since 0.1.18
 */
exports.filterMap = function (f) { return function (fa) {
    return F.filterMap(fa, f);
}; };
/**
 * @category Filterable
 * @since 0.1.18
 */
exports.partition = function (predicate) { return function (fa) { return F.partition(fa, predicate); }; };
/**
 * @category Filterable
 * @since 0.1.18
 */
exports.partitionMap = function (f) { return function (fa) { return F.partitionMap(fa, f); }; };
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.14
 */
exports.URI = 'IOOption';
/**
 * @category instances
 * @since 0.1.14
 */
exports.getApplySemigroup = function (S) {
    return IO_1.getSemigroup(O.getApplySemigroup(S));
};
/**
 * @category instances
 * @since 0.1.14
 */
exports.getApplyMonoid = function (M) { return ({
    concat: exports.getApplySemigroup(M).concat,
    empty: exports.some(M.empty)
}); };
/**
 * @category instances
 * @since 0.1.18
 */
exports.Functor = {
    URI: exports.URI,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Applicative = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap,
    of: exports.of
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Apply = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Monad = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap,
    of: exports.of,
    chain: T.chain
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Alt = {
    URI: exports.URI,
    map: T.map,
    alt: T.alt
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Alternative = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap,
    of: exports.of,
    alt: T.alt,
    zero: exports.zero
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Compactable = {
    URI: exports.URI,
    compact: exports.compact,
    separate: exports.separate
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Filterable = {
    URI: exports.URI,
    map: T.map,
    compact: exports.compact,
    separate: exports.separate,
    filter: F.filter,
    filterMap: F.filterMap,
    partition: F.partition,
    partitionMap: F.partitionMap
};
/**
 * @since 0.1.14
 */
exports.ioOption = __assign({ URI: exports.URI, of: exports.some, ap: T.ap, chain: T.chain, alt: T.alt, fromIO: exports.fromIO }, F);
