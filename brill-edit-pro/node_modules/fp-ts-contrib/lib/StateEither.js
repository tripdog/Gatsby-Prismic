"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var E = __importStar(require("fp-ts/lib/Either"));
var function_1 = require("fp-ts/lib/function");
var pipeable_1 = require("fp-ts/lib/pipeable");
var StateT_1 = require("fp-ts/lib/StateT");
var T = StateT_1.getStateM(E.either);
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @category constructors
 * @since 0.1.12
 */
exports.get = T.get;
/**
 * @category constructors
 * @since 0.1.12
 */
exports.put = T.put;
/**
 * @category constructors
 * @since 0.1.12
 */
exports.modify = T.modify;
/**
 * @category constructors
 * @since 0.1.12
 */
exports.gets = T.gets;
/**
 * @category constructors
 * @since 0.1.12
 */
exports.left = function (e) { return exports.fromEither(E.left(e)); };
/**
 * @category constructors
 * @since 0.1.12
 */
exports.right = T.of;
/**
 * @category constructors
 * @since 0.1.12
 */
exports.leftState = function (me) { return function (s) {
    return E.left(me(s)[0]);
}; };
/**
 * @category constructors
 * @since 0.1.12
 */
exports.rightState = T.fromState;
/**
 * @category constructors
 * @since 0.1.18
 */
exports.fromOption = function (onNone) { return function (ma) {
    return ma._tag === 'None' ? exports.left(onNone()) : exports.right(ma.value);
}; };
/**
 * @category constructors
 * @since 0.1.0
 */
exports.fromEither = T.fromM;
/**
 * @category constructors
 * @since 0.1.12
 */
exports.fromEitherK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return exports.fromEither(f.apply(void 0, a));
}; };
/**
 * @category constructors
 * @since 0.1.18
 */
exports.fromPredicate = function (predicate, onFalse) { return function (a) {
    return predicate(a) ? exports.right(a) : exports.left(onFalse(a));
}; };
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @category combinators
 * @since 0.1.18
 */
exports.filterOrElse = function (predicate, onFalse) { return function (ma) {
    return T.chain(ma, function (a) { return (predicate(a) ? exports.right(a) : exports.left(onFalse(a))); });
}; };
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
exports.map = function (f) { return function (fa) {
    return T.map(fa, f);
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
exports.ap = function (fa) { return function (fab) { return T.ap(fab, fa); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
exports.apFirst = function (fb) { return function (fa) {
    return pipeable_1.pipe(fa, exports.map(function (a) { return function (_) { return a; }; }), exports.ap(fb));
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
exports.apSecond = function (fb) { return function (fa) {
    return pipeable_1.pipe(fa, exports.map(function () { return function (b) { return b; }; }), exports.ap(fb));
}; };
/**
 * @category Applicative
 * @since 0.1.18
 */
exports.of = exports.right;
/**
 * @category Monad
 * @since 0.1.18
 */
exports.chain = function (f) { return function (ma) { return T.chain(ma, f); }; };
/**
 * @category Monad
 * @since 0.1.18
 */
exports.chainFirst = function (f) { return function (ma) { return T.chain(ma, function (a) { return T.map(f(a), function () { return a; }); }); }; };
/**
 * @since 0.1.12
 */
exports.chainEitherK = function (f) { return exports.chain(exports.fromEitherK(f)); };
/**
 * @category Monad
 * @since 0.1.18
 */
exports.flatten = function (mma) {
    return T.chain(mma, function_1.identity);
};
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.12
 */
exports.URI = 'StateEither';
/**
 * @category instances
 * @since 0.1.18
 */
exports.Functor = {
    URI: exports.URI,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Applicative = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap,
    of: exports.of
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Apply = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Monad = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap,
    chain: T.chain,
    of: exports.of
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.MonadThrow = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap,
    chain: T.chain,
    of: exports.of,
    throwError: exports.left
};
/**
 * @category instances
 * @since 0.1.12
 */
exports.stateEither = {
    URI: exports.URI,
    map: T.map,
    of: exports.right,
    ap: T.ap,
    chain: T.chain,
    throwError: exports.left
};
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------
/**
 * @since 0.1.12
 */
exports.evalState = T.evalState;
/**
 * @since 0.1.12
 */
exports.execState = T.execState;
