"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var function_1 = require("fp-ts/lib/function");
var I = __importStar(require("fp-ts/lib/IO"));
var pipeable_1 = require("fp-ts/lib/pipeable");
var ReaderT_1 = require("fp-ts/lib/ReaderT");
var T = ReaderT_1.getReaderM(I.io);
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @category constructors
 * @since 0.1.0
 */
exports.fromIO = T.fromM;
/**
 * @category constructors
 * @since 0.1.10
 */
exports.fromIOK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return exports.fromIO(f.apply(void 0, a));
}; };
/**
 * @category constructors
 * @since 0.1.0
 */
exports.fromReader = T.fromReader;
/**
 * @category constructors
 * @since 0.1.0
 */
exports.ask = T.ask;
/**
 * @category constructors
 * @since 0.1.0
 */
exports.asks = T.asks;
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @category combinators
 * @since 0.1.0
 */
exports.local = function (f) { return function (ma) { return T.local(ma, f); }; };
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
exports.map = function (f) { return function (fa) { return T.map(fa, f); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
exports.ap = function (fa) { return function (fab) {
    return T.ap(fab, fa);
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
exports.apFirst = function (fb) { return function (fa) {
    return pipeable_1.pipe(fa, exports.map(function (a) { return function (_) { return a; }; }), exports.ap(fb));
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
exports.apSecond = function (fb) { return function (fa) {
    return pipeable_1.pipe(fa, exports.map(function () { return function (b) { return b; }; }), exports.ap(fb));
}; };
/**
 * @category Applicative
 * @since 0.1.18
 */
exports.of = T.of;
/**
 * @category Monad
 * @since 0.1.18
 */
exports.chain = function (f) { return function (ma) {
    return T.chain(ma, f);
}; };
/**
 * @category Monad
 * @since 0.1.18
 */
exports.chainFirst = function (f) { return function (ma) { return T.chain(ma, function (a) { return T.map(f(a), function () { return a; }); }); }; };
/**
 * @category Monad
 * @since 0.1.10
 */
exports.chainIOK = function (f) {
    return exports.chain(exports.fromIOK(f));
};
/**
 * @category Monad
 * @since 0.1.18
 */
exports.flatten = function (mma) { return T.chain(mma, function_1.identity); };
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.0
 */
exports.URI = 'ReaderIO';
/**
 * @category instances
 * @since 0.1.18
 */
exports.Functor = {
    URI: exports.URI,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Applicative = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap,
    of: exports.of
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Apply = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Monad = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap,
    chain: T.chain,
    of: exports.of
};
/**
 * @category instances
 * @since 0.1.0
 */
exports.readerIO = {
    URI: exports.URI,
    map: T.map,
    of: T.of,
    ap: T.ap,
    chain: T.chain
};
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------
/**
 * @since 0.1.0
 */
exports.run = function (ma, r) { return ma(r)(); };
