/**
 * @since 0.1.0
 */
import { Applicative2 } from 'fp-ts/lib/Applicative'
import { Apply2 } from 'fp-ts/lib/Apply'
import { Functor2 } from 'fp-ts/lib/Functor'
import * as I from 'fp-ts/lib/IO'
import { Monad2 } from 'fp-ts/lib/Monad'
import { State } from 'fp-ts/lib/State'
import IO = I.IO
/**
 * @category model
 * @since 0.1.0
 */
export interface StateIO<S, A> {
  (s: S): IO<[A, S]>
}
/**
 * @category constructors
 * @since 0.1.0
 */
export declare const get: <S>() => StateIO<S, S>
/**
 * @category constructors
 * @since 0.1.0
 */
export declare const put: <S>(s: S) => StateIO<S, void>
/**
 * @category constructors
 * @since 0.1.0
 */
export declare const modify: <S>(f: (s: S) => S) => StateIO<S, void>
/**
 * @category constructors
 * @since 0.1.0
 */
export declare const gets: <S, A>(f: (s: S) => A) => StateIO<S, A>
/**
 * @category constructors
 * @since 0.1.0
 */
export declare const fromIO: <S, A>(ma: IO<A>) => StateIO<S, A>
/**
 * @category constructors
 * @since 0.1.0
 */
export declare const fromState: <S, A>(ma: State<S, A>) => StateIO<S, A>
/**
 * @category constructors
 * @since 0.1.10
 */
export declare const fromIOK: <A extends Array<unknown>, B>(f: (...a: A) => IO<B>) => <R>(...a: A) => StateIO<R, B>
/**
 * @category Functor
 * @since 0.1.18
 */
export declare const map: <A, B>(f: (a: A) => B) => <E>(fa: StateIO<E, A>) => StateIO<E, B>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const ap: <E, A>(fa: StateIO<E, A>) => <B>(fab: StateIO<E, (a: A) => B>) => StateIO<E, B>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const apFirst: <E, B>(fb: StateIO<E, B>) => <A>(fa: StateIO<E, A>) => StateIO<E, A>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const apSecond: <E, B>(fb: StateIO<E, B>) => <A>(fa: StateIO<E, A>) => StateIO<E, B>
/**
 * @category Applicative
 * @since 0.1.18
 */
export declare const of: <E, A>(a: A) => StateIO<E, A>
/**
 * @category Monad
 * @since 0.1.18
 */
export declare const chain: <E, A, B>(f: (a: A) => StateIO<E, B>) => (ma: StateIO<E, A>) => StateIO<E, B>
/**
 * @category Monad
 * @since 0.1.18
 */
export declare const chainFirst: <E, A, B>(f: (a: A) => StateIO<E, B>) => (ma: StateIO<E, A>) => StateIO<E, A>
/**
 * @category Monad
 * @since 0.1.10
 */
export declare const chainIOK: <A, B>(f: (a: A) => I.IO<B>) => <R>(ma: StateIO<R, A>) => StateIO<R, B>
/**
 * @category Monad
 * @since 0.1.18
 */
export declare const flatten: <E, A>(mma: StateIO<E, StateIO<E, A>>) => StateIO<E, A>
/**
 * @category instances
 * @since 0.1.0
 */
export declare const URI = 'StateIO'
/**
 * @category instances
 * @since 0.1.0
 */
export declare type URI = typeof URI
declare module 'fp-ts/lib/HKT' {
  interface URItoKind2<E, A> {
    StateIO: StateIO<E, A>
  }
}
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Functor: Functor2<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Applicative: Applicative2<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Apply: Apply2<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Monad: Monad2<URI>
/**
 * @category instances
 * @since 0.1.0
 */
export declare const stateIO: Monad2<URI>
/**
 * @since 0.1.0
 */
export declare const evalState: <S, A>(ma: StateIO<S, A>, s: S) => IO<A>
/**
 * @since 0.1.0
 */
export declare const execState: <S, A>(ma: StateIO<S, A>, s: S) => IO<S>
/**
 * @since 0.1.0
 */
export declare const run: <S, A>(ma: StateIO<S, A>, s: S) => A
