/**
 * @since 0.1.0
 */
import { Applicative2 } from 'fp-ts/lib/Applicative'
import { Apply2 } from 'fp-ts/lib/Apply'
import { Functor2 } from 'fp-ts/lib/Functor'
import * as I from 'fp-ts/lib/IO'
import { Monad2 } from 'fp-ts/lib/Monad'
import { Reader } from 'fp-ts/lib/Reader'
import IO = I.IO
/**
 * @category model
 * @since 0.1.0
 */
export interface ReaderIO<R, A> {
  (r: R): IO<A>
}
/**
 * @category constructors
 * @since 0.1.0
 */
export declare const fromIO: <R, A>(ma: IO<A>) => ReaderIO<R, A>
/**
 * @category constructors
 * @since 0.1.10
 */
export declare const fromIOK: <A extends Array<unknown>, B>(f: (...a: A) => IO<B>) => <R>(...a: A) => ReaderIO<R, B>
/**
 * @category constructors
 * @since 0.1.0
 */
export declare const fromReader: <R, A>(ma: Reader<R, A>) => ReaderIO<R, A>
/**
 * @category constructors
 * @since 0.1.0
 */
export declare const ask: <R>() => ReaderIO<R, R>
/**
 * @category constructors
 * @since 0.1.0
 */
export declare const asks: <R, A>(f: (r: R) => A) => ReaderIO<R, A>
/**
 * @category combinators
 * @since 0.1.0
 */
export declare const local: <Q, R>(f: (f: Q) => R) => <A>(ma: ReaderIO<R, A>) => ReaderIO<Q, A>
/**
 * @category Functor
 * @since 0.1.18
 */
export declare const map: <A, B>(f: (a: A) => B) => <E>(fa: ReaderIO<E, A>) => ReaderIO<E, B>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const ap: <E, A>(fa: ReaderIO<E, A>) => <B>(fab: ReaderIO<E, (a: A) => B>) => ReaderIO<E, B>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const apFirst: <E, B>(fb: ReaderIO<E, B>) => <A>(fa: ReaderIO<E, A>) => ReaderIO<E, A>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const apSecond: <E, B>(fb: ReaderIO<E, B>) => <A>(fa: ReaderIO<E, A>) => ReaderIO<E, B>
/**
 * @category Applicative
 * @since 0.1.18
 */
export declare const of: <E, A>(a: A) => ReaderIO<E, A>
/**
 * @category Monad
 * @since 0.1.18
 */
export declare const chain: <E, A, B>(f: (a: A) => ReaderIO<E, B>) => (ma: ReaderIO<E, A>) => ReaderIO<E, B>
/**
 * @category Monad
 * @since 0.1.18
 */
export declare const chainFirst: <E, A, B>(f: (a: A) => ReaderIO<E, B>) => (ma: ReaderIO<E, A>) => ReaderIO<E, A>
/**
 * @category Monad
 * @since 0.1.10
 */
export declare const chainIOK: <A, B>(f: (a: A) => I.IO<B>) => <R>(ma: ReaderIO<R, A>) => ReaderIO<R, B>
/**
 * @category Monad
 * @since 0.1.18
 */
export declare const flatten: <E, A>(mma: ReaderIO<E, ReaderIO<E, A>>) => ReaderIO<E, A>
/**
 * @category instances
 * @since 0.1.0
 */
export declare const URI = 'ReaderIO'
/**
 * @category instances
 * @since 0.1.0
 */
export declare type URI = typeof URI
declare module 'fp-ts/lib/HKT' {
  interface URItoKind2<E, A> {
    ReaderIO: ReaderIO<E, A>
  }
}
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Functor: Functor2<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Applicative: Applicative2<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Apply: Apply2<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Monad: Monad2<URI>
/**
 * @category instances
 * @since 0.1.0
 */
export declare const readerIO: Monad2<URI>
/**
 * @since 0.1.0
 */
export declare const run: <R, A>(ma: ReaderIO<R, A>, r: R) => A
