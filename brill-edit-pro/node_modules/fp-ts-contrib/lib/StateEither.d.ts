/**
 * @since 0.1.12
 */
import { Applicative3 } from 'fp-ts/lib/Applicative'
import { Apply3 } from 'fp-ts/lib/Apply'
import * as E from 'fp-ts/lib/Either'
import { Predicate, Refinement } from 'fp-ts/lib/function'
import { Functor3 } from 'fp-ts/lib/Functor'
import { Monad3 } from 'fp-ts/lib/Monad'
import { MonadThrow3 } from 'fp-ts/lib/MonadThrow'
import { Option } from 'fp-ts/lib/Option'
import { State } from 'fp-ts/lib/State'
/**
 * @category model
 * @since 0.1.12
 */
export interface StateEither<S, E, A> {
  (s: S): E.Either<E, [A, S]>
}
/**
 * @category constructors
 * @since 0.1.12
 */
export declare const get: <S, E = never>() => StateEither<S, E, S>
/**
 * @category constructors
 * @since 0.1.12
 */
export declare const put: <S, E = never>(s: S) => StateEither<S, E, void>
/**
 * @category constructors
 * @since 0.1.12
 */
export declare const modify: <S, E = never>(f: (s: S) => S) => StateEither<S, E, void>
/**
 * @category constructors
 * @since 0.1.12
 */
export declare const gets: <S, E = never, A = never>(f: (s: S) => A) => StateEither<S, E, A>
/**
 * @category constructors
 * @since 0.1.12
 */
export declare const left: <S, E, A = never>(e: E) => StateEither<S, E, A>
/**
 * @category constructors
 * @since 0.1.12
 */
export declare const right: <S, E = never, A = never>(a: A) => StateEither<S, E, A>
/**
 * @category constructors
 * @since 0.1.12
 */
export declare const leftState: <S, E = never, A = never>(me: State<S, E>) => StateEither<S, E, A>
/**
 * @category constructors
 * @since 0.1.12
 */
export declare const rightState: <S, E = never, A = never>(ma: State<S, A>) => StateEither<S, E, A>
/**
 * @category constructors
 * @since 0.1.18
 */
export declare const fromOption: <E>(onNone: () => E) => <R, A>(ma: Option<A>) => StateEither<R, E, A>
/**
 * @category constructors
 * @since 0.1.0
 */
export declare const fromEither: <S, E, A>(ma: E.Either<E, A>) => StateEither<S, E, A>
/**
 * @category constructors
 * @since 0.1.12
 */
export declare const fromEitherK: <E, A extends Array<unknown>, B>(
  f: (...a: A) => E.Either<E, B>
) => <S>(...a: A) => StateEither<S, E, B>
/**
 * @category constructors
 * @since 0.1.18
 */
export declare const fromPredicate: {
  <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <R>(a: A) => StateEither<R, E, B>
  <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(a: A) => StateEither<R, E, A>
}
/**
 * @category combinators
 * @since 0.1.18
 */
export declare const filterOrElse: {
  <E, A, B extends A>(refinement: Refinement<A, B>, onFalse: (a: A) => E): <R>(
    ma: StateEither<R, E, A>
  ) => StateEither<R, E, B>
  <E, A>(predicate: Predicate<A>, onFalse: (a: A) => E): <R>(ma: StateEither<R, E, A>) => StateEither<R, E, A>
}
/**
 * @category Functor
 * @since 0.1.18
 */
export declare const map: <A, B>(f: (a: A) => B) => <R, E>(fa: StateEither<R, E, A>) => StateEither<R, E, B>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const ap: <R, E, A>(
  fa: StateEither<R, E, A>
) => <B>(fab: StateEither<R, E, (a: A) => B>) => StateEither<R, E, B>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const apFirst: <R, E, B>(
  fb: StateEither<R, E, B>
) => <A>(fa: StateEither<R, E, A>) => StateEither<R, E, A>
/**
 * @category Apply
 * @since 0.1.18
 */
export declare const apSecond: <R, E, B>(
  fb: StateEither<R, E, B>
) => <A>(fa: StateEither<R, E, A>) => StateEither<R, E, B>
/**
 * @category Applicative
 * @since 0.1.18
 */
export declare const of: <R, E, A>(a: A) => StateEither<R, E, A>
/**
 * @category Monad
 * @since 0.1.18
 */
export declare const chain: <R, E, A, B>(
  f: (a: A) => StateEither<R, E, B>
) => (ma: StateEither<R, E, A>) => StateEither<R, E, B>
/**
 * @category Monad
 * @since 0.1.18
 */
export declare const chainFirst: <R, E, A, B>(
  f: (a: A) => StateEither<R, E, B>
) => (ma: StateEither<R, E, A>) => StateEither<R, E, A>
/**
 * @since 0.1.12
 */
export declare const chainEitherK: <E, A, B>(
  f: (a: A) => E.Either<E, B>
) => <S>(ma: StateEither<S, E, A>) => StateEither<S, E, B>
/**
 * @category Monad
 * @since 0.1.18
 */
export declare const flatten: <R, E, A>(mma: StateEither<R, E, StateEither<R, E, A>>) => StateEither<R, E, A>
/**
 * @category instances
 * @since 0.1.12
 */
export declare const URI = 'StateEither'
/**
 * @category instances
 * @since 0.1.12
 */
export declare type URI = typeof URI
declare module 'fp-ts/lib/HKT' {
  interface URItoKind3<R, E, A> {
    StateEither: StateEither<R, E, A>
  }
}
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Functor: Functor3<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Applicative: Applicative3<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Apply: Apply3<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const Monad: Monad3<URI>
/**
 * @category instances
 * @since 0.1.18
 */
export declare const MonadThrow: MonadThrow3<URI>
/**
 * @category instances
 * @since 0.1.12
 */
export declare const stateEither: Monad3<URI> & MonadThrow3<URI>
/**
 * @since 0.1.12
 */
export declare const evalState: <S, E, A>(ma: StateEither<S, E, A>, s: S) => E.Either<E, A>
/**
 * @since 0.1.12
 */
export declare const execState: <S, E, A>(ma: StateEither<S, E, A>, s: S) => E.Either<E, S>
