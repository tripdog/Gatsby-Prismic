import * as _prismicio_types from '@prismicio/types';
import { DateField, TimestampField, FilledLinkToDocumentField, LinkField, PrismicDocument, RichTextField } from '@prismicio/types';
import { RichTextFunctionSerializer, RichTextMapSerializer } from '@prismicio/richtext';
export { Element, asText } from '@prismicio/richtext';

/**
 * Transforms a date or timestamp field into a JavaScript Date object
 *
 * @param dateOrTimestampField - A date or timestamp field from Prismic
 *
 * @returns A Date object, null if provided date is falsy
 * @see Templating date field from Prismic {@link https://prismic.io/docs/technologies/templating-date-field-javascript}
 */
declare const asDate: (dateOrTimestampField: DateField | TimestampField) => Date | null;

/**
 * Resolves a link to a Prismic document to a URL
 *
 * @typeParam ReturnType - Return type of your link resolver function, useful if
 *   you prefer to return a complex object
 * @param linkToDocumentField - A document link field to resolve
 *
 * @returns Resolved URL
 * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}
 */
declare type LinkResolverFunction<ReturnType = string> = (linkToDocumentField: Omit<FilledLinkToDocumentField, "url">) => ReturnType;
/**
 * Serializes a node from a rich text or title field with a function to HTML
 *
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type HTMLFunctionSerializer = RichTextFunctionSerializer<string>;
/**
 * Serializes a node from a rich text or title field with a map to HTML
 *
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare type HTMLMapSerializer = RichTextMapSerializer<string>;

/**
 * Resolves any type of link field or document to a URL
 *
 * @typeParam LinkResolverFunctionReturnType - Link resolver function return type
 * @param linkFieldOrDocument - Any kind of link field or a document to resolve
 * @param linkResolver - An optional link resolver function, without it you're
 *   expected to use the `routes` options from the API
 *
 * @returns Resolved URL, null if provided link is empty
 * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}
 * @see Prismic API `routes` options documentation: {@link https://prismic.io/docs/technologies/route-resolver-nuxtjs}
 */
declare const asLink: <LinkResolverFunctionReturnType = string>(linkFieldOrDocument: LinkField | PrismicDocument, linkResolver?: LinkResolverFunction<LinkResolverFunctionReturnType> | null | undefined) => string | LinkResolverFunctionReturnType | null;

/**
 * Serializes a rich text or title field to an HTML string
 *
 * @param richTextField - A rich text or title field from Prismic
 * @param linkResolver - An optional link resolver function to resolve links,
 *   without it you're expected to use the `routes` options from the API
 * @param htmlSerializer - An optional serializer, unhandled cases will fallback
 *   to the default serializer
 *
 * @returns HTML equivalent of the provided rich text or title field
 * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}
 */
declare function asHTML(richTextField: RichTextField, linkResolver?: LinkResolverFunction<string> | null, htmlSerializer?: HTMLFunctionSerializer | HTMLMapSerializer | null): string;

/**
 * Converts a document into a link field, this is useful when crawling the API
 * for document links
 *
 * @typeParam TDocument - Specific interface of the provided document
 * @param prismicDocument - A document coming from Prismic
 *
 * @returns The equivalent link field to use with `asLink()`
 * @internal
 */
declare const documentToLinkField: <TDocument extends PrismicDocument<Record<string, _prismicio_types.AnyRegularField | _prismicio_types.GroupField<Record<string, _prismicio_types.AnyRegularField>> | _prismicio_types.SliceZone<_prismicio_types.Slice<string, Record<string, _prismicio_types.AnyRegularField>, Record<string, _prismicio_types.AnyRegularField>> | _prismicio_types.SharedSlice<string, _prismicio_types.SharedSliceVariation<string, Record<string, _prismicio_types.AnyRegularField>, Record<string, _prismicio_types.AnyRegularField>>>>>, string, string>>(prismicDocument: TDocument) => FilledLinkToDocumentField<TDocument["type"], TDocument["lang"], TDocument["data"]>;

export { HTMLFunctionSerializer, HTMLMapSerializer, LinkResolverFunction, asDate, asHTML, asLink, documentToLinkField };
